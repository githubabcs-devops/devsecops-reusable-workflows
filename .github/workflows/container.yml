name: Container Build and Release

on:
  workflow_call:
    inputs:
      version:
        description: "Semantic version of the image"
        type: string

      container-file:
        description: "Path to the Dockerfile"
        type: string
        default: "Dockerfile"

      container-name:
        description: "Name of the container"
        type: string
        default: "${{ github.repository }}"

      publish:
        description: "Publish the image to the registry"
        type: string
        default: "true"

      sbom:
        description: "Generate and upload SBOM"
        type: string
        default: "true"
      
      scanning:
        description: "Scan the image"
        type: string
        default: "true"
      
      scanning-block:
        description: "Block the build if vulnerabilities are found"
        type: string
        default: "false"

      tags:
        description: "Comma-separated list of tags"
        type: string
        default: "latest"

env:
  REGISTRY: ghcr.io

jobs:
  set-version:
    runs-on: ubuntu-latest
    outputs:
      release: ${{ steps.set-version.outputs.release }}
      version: ${{ steps.set-version.outputs.version }}

    permissions:
      id-token: write
      contents: read

    steps:
      - name: "Checkout"
        uses: actions/checkout@v4
      - name: "Get and Set version"
        id: set-version
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -e

          if [[ -f .release.yml ]]; then
            pip install yq
            current_version=$(yq -r ".version" .release.yml)
            echo "Current Version :: $current_version"  

            echo "version=$current_version" >> $GITHUB_OUTPUT
          else
            echo "Failed to find version..."
            exit 1
          fi

          released_version=$(gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/:owner/:repo/releases/latest | jq -r ".tag_name")

          if [[ "$current_version" == "NA" || "$current_version" == "$released_version" ]]; then
            echo "No new release found"
            echo "release=false" >> "$GITHUB_OUTPUT"
          else
            echo "New release found"
            echo "version=$current_version" >> "$GITHUB_OUTPUT"
            echo "release=true" >> "$GITHUB_OUTPUT"
          fi

  # Scan the container 
  scan-image:
    uses: githubabcs-devops/devsecops-reusable-workflows/.github/workflows/container-security.yml@main
    needs: set-version
    secrets: inherit
    permissions:
      id-token: write
      contents: read
      packages: read           # Read Container Registry
      security-events: write   # Code Scanning
    with:
      version: ${{ needs.set-version.outputs.version }}
      container-file: ${{ inputs.container-file }}
      container-name: ${{ inputs.container-name }}
      scanning-block: ${{ inputs.scanning-block }}

  publish-image:
    uses: githubabcs-devops/devsecops-reusable-workflows/.github/workflows/container-publish.yml@main
    needs: [ scan-image, set-version ]
    if: ${{ needs.set-version.outputs.release == 'true' }}
    secrets: inherit
    permissions:
      id-token: write
      contents: write          # Upload SBOM to GitHub
      packages: write          # Push to Container Registry
      attestations: write      # Upload attestations
    with:
      version: ${{ needs.set-version.outputs.version }}
      container-file: ${{ inputs.container-file }}
      container-name: ${{ inputs.container-name }}
      sbom: ${{ inputs.sbom }}
